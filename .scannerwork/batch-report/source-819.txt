<?php

namespace Faker\Provider\ja_JP;

class Address extends \Faker\Provider\Address
{
    protected static $country = array(
        'ã‚¢ãƒ•ã‚¬ãƒ‹ã‚¹ã‚¿ãƒ³', 'ã‚¢ãƒ«ãƒ�ãƒ‹ã‚¢', 'ã‚¢ãƒ«ã‚¸ã‚§ãƒªã‚¢', 'ã‚¢ãƒ¡ãƒªã‚«é ˜ã‚µãƒ¢ã‚¢', 'ã‚¢ãƒ³ãƒ‰ãƒ©', 'ã‚¢ãƒ³ã‚´ãƒ©', 'ã‚¢ãƒ³ã‚®ãƒ©', 'å�—æ¥µå¤§é™¸', 'ã‚¢ãƒ³ãƒ†ã‚£ã‚°ã‚¢ãƒ�ãƒ¼ãƒ–ãƒ¼ãƒ€', 'ã‚¢ãƒ«ã‚¼ãƒ³ãƒ�ãƒ³', 'ã‚¢ãƒ«ãƒ¡ãƒ‹ã‚¢', 'ã‚¢ãƒ«ãƒ�', 'ã‚ªãƒ¼ã‚¹ãƒˆãƒ©ãƒªã‚¢', 'ã‚ªãƒ¼ã‚¹ãƒˆãƒªã‚¢', 'ã‚¢ã‚¼ãƒ«ãƒ�ã‚¤ã‚¸ãƒ£ãƒ³',
        'ãƒ�ãƒ�ãƒž', 'ãƒ�ãƒ¼ãƒ¬ãƒ¼ãƒ³', 'ãƒ�ãƒ³ã‚°ãƒ©ãƒ‡ã‚·ãƒ¥', 'ãƒ�ãƒ«ãƒ�ãƒ‰ã‚¹', 'ãƒ™ãƒ©ãƒ«ãƒ¼ã‚·', 'ãƒ™ãƒ«ã‚®ãƒ¼', 'ãƒ™ãƒªãƒ¼ã‚º', 'ãƒ™ãƒŠãƒ³', 'ãƒ�ãƒŸãƒ¥ãƒ¼ãƒ€å³¶', 'ãƒ–ãƒ¼ã‚¿ãƒ³', 'ãƒœãƒªãƒ“ã‚¢', 'ãƒœã‚¹ãƒ‹ã‚¢ãƒ»ãƒ˜ãƒ«ãƒ„ã‚§ã‚´ãƒ“ãƒŠ', 'ãƒœãƒ„ãƒ¯ãƒŠ', 'ãƒ–ãƒ¼ãƒ™å³¶', 'ãƒ–ãƒ©ã‚¸ãƒ«', 'ã‚¤ã‚®ãƒªã‚¹é ˜ã‚¤ãƒ³ãƒ‰æ´‹åœ°åŸŸ', 'ã‚¤ã‚®ãƒªã‚¹é ˜ãƒ´ã‚¡ãƒ¼ã‚¸ãƒ³è«¸å³¶', 'ãƒ–ãƒ«ãƒ�ã‚¤', 'ãƒ–ãƒ«ã‚¬ãƒªã‚¢', 'ãƒ–ãƒ«ã‚­ãƒŠãƒ•ã‚¡ã‚½', 'ãƒ–ãƒ«ãƒ³ã‚¸',
        'ã‚«ãƒ³ãƒœã‚¸ã‚¢', 'ã‚«ãƒ¡ãƒ«ãƒ¼ãƒ³', 'ã‚«ãƒŠãƒ€', 'ã‚«ãƒ¼ãƒœãƒ™ãƒ«ãƒ‡', 'ã‚±ã‚¤ãƒžãƒ³è«¸å³¶', 'ä¸­å¤®ã‚¢ãƒ•ãƒªã‚«å…±å’Œå›½', 'ãƒ�ãƒ£ãƒ‰', 'ãƒ�ãƒª', 'ä¸­å›½', 'ã‚¯ãƒªã‚¹ãƒžã‚¹å³¶', 'ã‚³ã‚³ã‚¹è«¸å³¶', 'ã‚³ãƒ­ãƒ³ãƒ“ã‚¢', 'ã‚³ãƒ¢ãƒ­', 'ã‚³ãƒ³ã‚´å…±å’Œå›½', 'ã‚¯ãƒƒã‚¯è«¸å³¶', 'ã‚³ã‚¹ã‚¿ãƒªã‚«', 'ã‚³ãƒ¼ãƒˆã‚¸ãƒœãƒ¯ãƒ¼ãƒ«', 'ã‚¯ãƒ­ã‚¢ãƒ�ã‚¢', 'ã‚­ãƒ¥ãƒ¼ãƒ�', 'ã‚­ãƒ—ãƒ­ã‚¹å…±å’Œå›½', 'ãƒ�ã‚§ã‚³å…±å’Œå›½',
        'ãƒ‡ãƒ³ãƒžãƒ¼ã‚¯', 'ã‚¸ãƒ–ãƒ�å…±å’Œå›½', 'ãƒ‰ãƒŸãƒ‹ã‚«å›½', 'ãƒ‰ãƒŸãƒ‹ã‚«å…±å’Œå›½',
        'ã‚¨ã‚¯ã‚¢ãƒ‰ãƒ«', 'ã‚¨ã‚¸ãƒ—ãƒˆ', 'ã‚¨ãƒ«ã‚µãƒ«ãƒ�ãƒ‰ãƒ«', 'èµ¤é�“ã‚®ãƒ‹ã‚¢å…±å’Œå›½', 'ã‚¨ãƒªãƒˆãƒªã‚¢', 'ã‚¨ã‚¹ãƒˆãƒ‹ã‚¢', 'ã‚¨ãƒ�ã‚ªãƒ”ã‚¢',
        'ãƒ•ã‚§ãƒ­ãƒ¼è«¸å³¶', 'ãƒ•ã‚©ãƒ¼ã‚¯ãƒ©ãƒ³ãƒ‰è«¸å³¶', 'ãƒ•ã‚£ã‚¸ãƒ¼å…±å’Œå›½', 'ãƒ•ã‚£ãƒ³ãƒ©ãƒ³ãƒ‰', 'ãƒ•ãƒ©ãƒ³ã‚¹', 'ãƒ•ãƒ©ãƒ³ã‚¹é ˜ã‚®ã‚¢ãƒŠ', 'ãƒ•ãƒ©ãƒ³ã‚¹é ˜ãƒ�ãƒªãƒ�ã‚·ã‚¢', 'ãƒ•ãƒ©ãƒ³ã‚¹é ˜æ¥µå�—è«¸å³¶',
        'ã‚¬ãƒœãƒ³', 'ã‚¬ãƒ³ãƒ“ã‚¢', 'ã‚°ãƒ«ã‚¸ã‚¢', 'ãƒ‰ã‚¤ãƒ„', 'ã‚¬ãƒ¼ãƒŠ', 'ã‚¸ãƒ–ãƒ©ãƒ«ã‚¿ãƒ«', 'ã‚®ãƒªã‚·ãƒ£', 'ã‚°ãƒªãƒ¼ãƒ³ãƒ©ãƒ³ãƒ‰', 'ã‚°ãƒ¬ãƒŠãƒ€', 'ã‚°ã‚¢ãƒ‰ãƒ«ãƒ¼ãƒ—', 'ã‚°ã‚¢ãƒ ', 'ã‚°ã‚¢ãƒ†ãƒžãƒ©', 'ã‚¬ãƒ¼ãƒ³ã‚¸ãƒ¼', 'ã‚®ãƒ‹ã‚¢', 'ã‚®ãƒ‹ã‚¢ãƒ“ã‚µã‚¦', 'ã‚¬ã‚¤ã‚¢ãƒŠ',
        'ãƒ�ã‚¤ãƒ�', 'ãƒ�ãƒ¼ãƒ‰å³¶ã�¨ãƒžã‚¯ãƒ‰ãƒŠãƒ«ãƒ‰è«¸å³¶', 'ãƒ�ãƒ�ã‚«ãƒ³å¸‚å›½', 'ãƒ›ãƒ³ã‚¸ãƒ¥ãƒ©ã‚¹', 'é¦™æ¸¯', 'ãƒ�ãƒ³ã‚¬ãƒªãƒ¼',
        'ã‚¢ã‚¤ã‚¹ãƒ©ãƒ³ãƒ‰', 'ã‚¤ãƒ³ãƒ‰', 'ã‚¤ãƒ³ãƒ‰ãƒ�ã‚·ã‚¢', 'ã‚¤ãƒ©ãƒ³', 'ã‚¤ãƒ©ã‚¯', 'ã‚¢ã‚¤ãƒ«ãƒ©ãƒ³ãƒ‰å…±å’Œå›½', 'ãƒžãƒ³å³¶', 'ã‚¤ã‚¹ãƒ©ã‚¨ãƒ«', 'ã‚¤ã‚¿ãƒªã‚¢',
        'ã‚¸ãƒ£ãƒžã‚¤ã‚«', 'æ—¥æœ¬', 'ã‚¸ãƒ£ãƒ¼ã‚¸ãƒ¼å³¶', 'ãƒ¨ãƒ«ãƒ€ãƒ³',
        'ã‚«ã‚¶ãƒ•ã‚¹ã‚¿ãƒ³', 'ã‚±ãƒ‹ã‚¢', 'ã‚­ãƒªãƒ�ã‚¹', 'æœ�é®®', 'éŸ“å›½', 'ã‚¯ã‚¦ã‚§ãƒ¼ãƒˆ', 'ã‚­ãƒ«ã‚®ã‚¹å…±å’Œå›½',
        'ãƒ©ã‚ªã‚¹äººæ°‘æ°‘ä¸»å…±å’Œå›½', 'ãƒ©ãƒˆãƒ“ã‚¢', 'ãƒ¬ãƒ�ãƒŽãƒ³', 'ãƒ¬ã‚½ãƒˆ', 'ãƒªãƒ™ãƒªã‚¢', 'ãƒªãƒ“ã‚¢å›½', 'ãƒªãƒ’ãƒ†ãƒ³ã‚·ãƒ¥ã‚¿ã‚¤ãƒ³', 'ãƒªãƒˆã‚¢ãƒ‹ã‚¢', 'ãƒ«ã‚¯ã‚»ãƒ³ãƒ–ãƒ«ã‚¯',
        'ãƒžã‚«ã‚ª', 'ãƒžã‚±ãƒ‰ãƒ‹ã‚¢å…±å’Œå›½', 'ãƒžãƒ€ã‚¬ã‚¹ã‚«ãƒ«', 'ãƒžãƒ©ã‚¦ã‚£', 'ãƒžãƒ¬ãƒ¼ã‚·ã‚¢', 'ãƒ¢ãƒ«ãƒ‡ã‚£ãƒ–', 'ãƒžãƒª', 'ãƒžãƒ«ã‚¿å…±å’Œå›½', 'ãƒžãƒ¼ã‚·ãƒ£ãƒ«è«¸å³¶', 'ãƒžãƒ«ãƒ†ã‚£ãƒ‹ãƒ¼ã‚¯', 'ãƒ¢ãƒ¼ãƒªã‚¿ãƒ‹ã‚¢ãƒ»ã‚¤ã‚¹ãƒ©ãƒ å…±å’Œå›½', 'ãƒ¢ãƒ¼ãƒªã‚·ãƒ£ã‚¹', 'ãƒžãƒ¨ãƒƒãƒˆ', 'ãƒ¡ã‚­ã‚·ã‚³', 'ãƒŸã‚¯ãƒ­ãƒ�ã‚·ã‚¢é€£é‚¦', 'ãƒ¢ãƒ«ãƒ‰ãƒ�å…±å’Œå›½', 'ãƒ¢ãƒŠã‚³å…¬å›½', 'ãƒ¢ãƒ³ã‚´ãƒ«', 'ãƒ¢ãƒ³ãƒ†ãƒ�ã‚°ãƒ­å…±å’Œå›½', 'ãƒ¢ãƒ³ãƒˆã‚»ãƒ©ãƒˆ', 'ãƒ¢ãƒ­ãƒƒã‚³', 'ãƒ¢ã‚¶ãƒ³ãƒ“ãƒ¼ã‚¯', 'ãƒŸãƒ£ãƒ³ãƒžãƒ¼',
        'ãƒŠãƒŸãƒ“ã‚¢', 'ãƒŠã‚¦ãƒ«', 'ãƒ�ãƒ‘ãƒ¼ãƒ«', 'ã‚ªãƒ©ãƒ³ãƒ€é ˜ã‚¢ãƒ³ãƒ†ã‚£ãƒ«', 'ã‚ªãƒ©ãƒ³ãƒ€', 'ãƒ‹ãƒ¥ãƒ¼ã‚«ãƒ¬ãƒ‰ãƒ‹ã‚¢', 'ãƒ‹ãƒ¥ãƒ¼ã‚¸ãƒ¼ãƒ©ãƒ³ãƒ‰', 'ãƒ‹ã‚«ãƒ©ã‚°ã‚¢', 'ãƒ‹ã‚¸ã‚§ãƒ¼ãƒ«', 'ãƒŠã‚¤ã‚¸ã‚§ãƒªã‚¢', 'ãƒ‹ãƒ¼ã‚¹', 'ãƒŽãƒ¼ãƒ•ã‚©ãƒ¼ã‚¯å³¶', 'åŒ—ãƒžãƒªã‚¢ãƒŠè«¸å³¶', 'ãƒŽãƒ«ã‚¦ã‚§ãƒ¼',
        'ã‚ªãƒžãƒ¼ãƒ³',
        'ãƒ‘ã‚­ã‚¹ã‚¿ãƒ³', 'ãƒ‘ãƒ©ã‚ª', 'ãƒ‘ãƒ¬ã‚¹ãƒ�ãƒŠè‡ªæ²»åŒº', 'ãƒ‘ãƒŠãƒž', 'ãƒ‘ãƒ—ã‚¢ãƒ‹ãƒ¥ãƒ¼ã‚®ãƒ‹ã‚¢', 'ãƒ‘ãƒ©ã‚°ã‚¢ã‚¤', 'ãƒšãƒ«ãƒ¼', 'ãƒ•ã‚£ãƒªãƒ”ãƒ³', 'ãƒ”ãƒˆã‚±ã‚¢ãƒ³è«¸å³¶', 'ãƒ�ãƒ¼ãƒ©ãƒ³ãƒ‰', 'ãƒ�ãƒ«ãƒˆã‚¬ãƒ«', 'ãƒ—ã‚¨ãƒ«ãƒˆãƒªã‚³',
        'ã‚«ã‚¿ãƒ¼ãƒ«',
        'ãƒ¬ãƒ¦ãƒ‹ã‚ªãƒ³', 'ãƒ«ãƒ¼ãƒžãƒ‹ã‚¢', 'ãƒ­ã‚·ã‚¢', 'ãƒ«ãƒ¯ãƒ³ãƒ€',
        'ã‚µãƒ³ãƒ»ãƒ�ãƒ«ãƒ†ãƒ«ãƒŸãƒ¼å³¶', 'ã‚»ãƒ³ãƒˆãƒ˜ãƒ¬ãƒŠ', 'ã‚»ãƒ³ãƒˆã‚¯ãƒªã‚¹ãƒˆãƒ•ã‚¡ãƒ¼ãƒ»ãƒ�ã‚¤ãƒ“ã‚¹é€£é‚¦', 'ã‚»ãƒ³ãƒˆãƒ«ã‚·ã‚¢', 'ã‚»ãƒ³ãƒˆãƒ»ãƒžãƒ¼ãƒ�ãƒ³å³¶', 'ã‚µãƒ³ãƒ”ã‚¨ãƒ¼ãƒ«å³¶ãƒ»ãƒŸã‚¯ãƒ­ãƒ³å³¶', 'ã‚»ãƒ³ãƒˆãƒ“ãƒ³ã‚»ãƒ³ãƒˆãƒ»ã‚°ãƒ¬ãƒŠãƒ‡ã‚£ãƒ¼ãƒ³', 'ã‚µãƒ¢ã‚¢', 'ã‚µãƒ³ãƒžãƒªãƒŽ', 'ã‚µãƒ³ãƒˆãƒ¡ãƒ—ãƒªãƒ³ã‚·ãƒš', 'ã‚µã‚¦ã‚¸ã‚¢ãƒ©ãƒ“ã‚¢', 'ã‚»ãƒ�ã‚¬ãƒ«', 'ã‚»ãƒ«ãƒ“ã‚¢', 'ã‚»ã‚¤ã‚·ã‚§ãƒ«', 'ã‚·ã‚¨ãƒ©ãƒ¬ã‚ªãƒ�', 'ã‚·ãƒ³ã‚¬ãƒ�ãƒ¼ãƒ«', 'ã‚¹ãƒ­ãƒ�ã‚­ã‚¢', 'ã‚¹ãƒ­ãƒ™ãƒ‹ã‚¢', 'ã‚½ãƒ­ãƒ¢ãƒ³è«¸å³¶', 'ã‚½ãƒžãƒªã‚¢', 'å�—ã‚¢ãƒ•ãƒªã‚«å…±å’Œå›½', 'ã‚µã‚¦ã‚¹ã‚¸ãƒ§ãƒ¼ã‚¸ã‚¢ãƒ»ã‚µã‚¦ã‚¹ã‚µãƒ³ãƒ‰ã‚¦ã‚£ãƒƒãƒ�è«¸å³¶', 'ã‚¹ãƒšã‚¤ãƒ³', 'ã‚¹ãƒªãƒ©ãƒ³ã‚«', 'ã‚¹ãƒ¼ãƒ€ãƒ³', 'ã‚¹ãƒªãƒŠãƒ ', 'ã‚¹ãƒ´ã‚¡ãƒ¼ãƒ«ãƒ�ãƒ«è«¸å³¶ã�Šã‚ˆã�³ãƒ¤ãƒ³ãƒžã‚¤ã‚¨ãƒ³å³¶', 'ã‚¹ãƒ¯ã‚¸ãƒ©ãƒ³ãƒ‰çŽ‹å›½', 'ã‚¹ã‚¦ã‚§ãƒ¼ãƒ‡ãƒ³', 'ã‚¹ã‚¤ã‚¹', 'ã‚·ãƒªã‚¢',
        'å�°æ¹¾', 'ã‚¿ã‚¸ã‚­ã‚¹ã‚¿ãƒ³å…±å’Œå›½', 'ã‚¿ãƒ³ã‚¶ãƒ‹ã‚¢', 'ã‚¿ã‚¤', 'æ�±ãƒ†ã‚£ãƒ¢ãƒ¼ãƒ«', 'ãƒˆãƒ¼ã‚´', 'ãƒˆã‚±ãƒ©ã‚¦', 'ãƒˆãƒ³ã‚¬', 'ãƒˆãƒªãƒ‹ãƒ€ãƒ¼ãƒ‰ãƒ»ãƒˆãƒ�ã‚´', 'ãƒ�ãƒ¥ãƒ‹ã‚¸ã‚¢', 'ãƒˆãƒ«ã‚³', 'ãƒˆãƒ«ã‚¯ãƒ¡ãƒ‹ã‚¹ã‚¿ãƒ³', 'ã‚¿ãƒ¼ã‚¯ã‚¹ãƒ»ã‚«ã‚¤ã‚³ã‚¹è«¸å³¶', 'ãƒ„ãƒ�ãƒ«',
        'ã‚¦ã‚¬ãƒ³ãƒ€', 'ã‚¦ã‚¯ãƒ©ã‚¤ãƒŠ', 'ã‚¢ãƒ©ãƒ–é¦–é•·å›½é€£é‚¦', 'ã‚¤ã‚®ãƒªã‚¹', 'ã‚¢ãƒ¡ãƒªã‚«å�ˆè¡†å›½', 'å�ˆè¡†å›½é ˜æœ‰å°�é›¢å³¶', 'ã‚¢ãƒ¡ãƒªã‚«é ˜ãƒ´ã‚¡ãƒ¼ã‚¸ãƒ³è«¸å³¶', 'ã‚¦ãƒ«ã‚°ã‚¢ã‚¤', 'ã‚¦ã‚ºãƒ™ã‚­ã‚¹ã‚¿ãƒ³',
        'ãƒ�ãƒŒã‚¢ãƒ„', 'ãƒ™ãƒ�ã‚ºã‚¨ãƒ©', 'ãƒ™ãƒˆãƒŠãƒ ',
        'ã‚¦ã‚©ãƒªã‚¹ãƒ»ãƒ•ãƒ„ãƒŠ', 'è¥¿ã‚µãƒ�ãƒ©',
        'ã‚¤ã‚¨ãƒ¡ãƒ³',
        'ã‚¶ãƒ³ãƒ“ã‚¢', 'ã‚¸ãƒ³ãƒ�ãƒ–ã‚¨'
    );
    protected static $prefecture = array(
        'åŒ—æµ·é�“',
        'é�’æ£®çœŒ', 'å²©æ‰‹çœŒ', 'å®®åŸŽçœŒ', 'ç§‹ç”°çœŒ', 'å±±å½¢çœŒ', 'ç¦�å³¶çœŒ',
        'èŒ¨åŸŽçœŒ', 'æ ƒæœ¨çœŒ', 'ç¾¤é¦¬çœŒ', 'åŸ¼çŽ‰çœŒ', 'å�ƒè‘‰çœŒ', 'æ�±äº¬éƒ½', 'ç¥žå¥ˆå·�çœŒ',
        'æ–°æ½ŸçœŒ', 'å¯Œå±±çœŒ', 'çŸ³å·�çœŒ', 'ç¦�äº•çœŒ', 'å±±æ¢¨çœŒ', 'é•·é‡ŽçœŒ', 'å²�é˜œçœŒ', 'é�™å²¡çœŒ', 'æ„›çŸ¥çœŒ',
        'ä¸‰é‡�çœŒ', 'æ»‹è³€çœŒ', 'äº¬éƒ½åºœ', 'å¤§é˜ªåºœ', 'å…µåº«çœŒ', 'å¥ˆè‰¯çœŒ', 'å’Œæ­Œå±±çœŒ',
        'é³¥å�–çœŒ', 'å³¶æ ¹çœŒ', 'å²¡å±±çœŒ', 'åºƒå³¶çœŒ', 'å±±å�£çœŒ',
        'å¾³å³¶çœŒ', 'é¦™å·�çœŒ', 'æ„›åª›çœŒ', 'é«˜çŸ¥çœŒ',
        'ç¦�å²¡çœŒ', 'ä½�è³€çœŒ', 'é•·å´ŽçœŒ', 'ç†Šæœ¬çœŒ', 'å¤§åˆ†çœŒ', 'å®®å´ŽçœŒ', 'é¹¿å…�å³¶çœŒ',
        'æ²–ç¸„çœŒ'
    );
    protected static $ward = array('ä¸­å¤®', 'åŒ—', 'æ�±', 'å�—', 'è¥¿');

    protected static $citySuffix = array('å¸‚');
    protected static $wardSuffix = array('åŒº');
    protected static $streetSuffix = array('ç”º');

    protected static $postcodeFormats = array('{{postcode1}}{{postcode2}}');
    protected static $cityFormats = array(
        '{{lastName}}{{citySuffix}}',
    );
    protected static $streetNameFormats = array(
        '{{lastName}}{{streetSuffix}}'
    );
    protected static $streetAddressFormats = array(
        '{{streetName}}{{lastName}}{{areaNumber}}-{{areaNumber}}-{{areaNumber}}'
    );
    protected static $addressFormats = array(
        '{{postcode}}  {{prefecture}}{{city}}{{ward}}{{streetAddress}}',
        '{{postcode}}  {{prefecture}}{{city}}{{ward}}{{streetAddress}} {{secondaryAddress}}'
    );
    protected static $secondaryAddressFormats = array(
        'ãƒ�ã‚¤ãƒ„{{lastName}}{{buildingNumber}}å�·',
        'ã‚³ãƒ¼ãƒ�{{lastName}}{{buildingNumber}}å�·'
    );

    /**
     * @example 111
     */
    public static function postcode1()
    {
        return static::numberBetween(100, 999);
    }

    /**
     * @example 2222
     */
    public static function postcode2()
    {
        return static::numberBetween(1000, 9999);
    }

    /**
     * @example 1112222
     */
    public static function postcode()
    {
        $postcode1 = static::postcode1();
        $postcode2 = static::postcode2();

        return $postcode1 . $postcode2;
    }

    /**
     * @example 'æ�±äº¬éƒ½'
     */
    public static function prefecture()
    {
        return static::randomElement(static::$prefecture);
    }

    /**
     * @example 'åŒ—åŒº'
     */
    public static function ward()
    {
        $ward = static::randomElement(static::$ward);
        $suffix = static::randomElement(static::$wardSuffix);

        return $ward . $suffix;
    }

    /**
     * ä¸�ã€�ç•ªåœ°ã€�å�·
     *
     * @return int
     */
    public static function areaNumber()
    {
        return static::numberBetween(1, 10);
    }

    public static function buildingNumber()
    {
        return static::numberBetween(101, 110);
    }

    public function secondaryAddress()
    {
        $format = static::randomElement(static::$secondaryAddressFormats);

        return $this->generator->parse($format);
    }
}
