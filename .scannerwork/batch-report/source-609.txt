<?php

namespace Faker\Provider\cs_CZ;

/**
 * Czech months and days without setting locale
 */
class DateTime extends \Faker\Provider\DateTime
{
    protected static $days = array(
        'nedÄ›le', 'pondÄ›lÃ­', 'ÃºterÃ½', 'stÅ™eda', 'Ä�tvrtek', 'pÃ¡tek', 'sobota'
    );
    protected static $months = array(
        'leden', 'Ãºnor', 'bÅ™ezen', 'duben', 'kvÄ›ten', 'Ä�erven', 'Ä�ervenec',
        'srpen', 'zÃ¡Å™Ã­', 'Å™Ã­jen', 'listopad', 'prosinec'
    );
    protected static $monthsGenitive  = array(
        'ledna', 'Ãºnora', 'bÅ™ezna', 'dubna', 'kvÄ›tna', 'Ä�ervna', 'Ä�ervence',
        'srpna', 'zÃ¡Å™Ã­', 'Å™Ã­jna', 'listopadu', 'prosince'
    );
    protected static $formattedDateFormat = array(
        '{{dayOfMonth}}. {{monthNameGenitive}} {{year}}',
    );

    public static function monthName($max = 'now')
    {
        return static::$months[parent::month($max) - 1];
    }

    public static function monthNameGenitive($max = 'now')
    {
        return static::$monthsGenitive[parent::month($max) - 1];
    }

    public static function dayOfWeek($max = 'now')
    {
        return static::$days[static::dateTime($max)->format('w')];
    }

    /**
     * @param  \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
     * @return string
     * @example '2'
     */
    public static function dayOfMonth($max = 'now')
    {
        return static::dateTime($max)->format('j');
    }

    /**
     * Full date with inflected month
     * @return string
     * @example '16. listopadu 2003'
     */
    public function formattedDate()
    {
        $format = static::randomElement(static::$formattedDateFormat);

        return $this->generator->parse($format);
    }
}
