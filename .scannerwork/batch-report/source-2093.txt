<?php

namespace Illuminate\Support;

use Illuminate\Support\Traits\Macroable;

class Str
{
    use Macroable;

    /**
     * The cache of snake-cased words.
     *
     * @var array
     */
    protected static $snakeCache = [];

    /**
     * The cache of camel-cased words.
     *
     * @var array
     */
    protected static $camelCache = [];

    /**
     * The cache of studly-cased words.
     *
     * @var array
     */
    protected static $studlyCache = [];

    /**
     * Transliterate a UTF-8 value to ASCII.
     *
     * @param  string  $value
     * @return string
     */
    public static function ascii($value)
    {
        foreach (static::charsArray() as $key => $val) {
            $value = str_replace($val, $key, $value);
        }

        return preg_replace('/[^\x20-\x7E]/u', '', $value);
    }

    /**
     * Convert a value to camel case.
     *
     * @param  string  $value
     * @return string
     */
    public static function camel($value)
    {
        if (isset(static::$camelCache[$value])) {
            return static::$camelCache[$value];
        }

        return static::$camelCache[$value] = lcfirst(static::studly($value));
    }

    /**
     * Determine if a given string contains a given substring.
     *
     * @param  string  $haystack
     * @param  string|array  $needles
     * @return bool
     */
    public static function contains($haystack, $needles)
    {
        foreach ((array) $needles as $needle) {
            if ($needle != '' && mb_strpos($haystack, $needle) !== false) {
                return true;
            }
        }

        return false;
    }

    /**
     * Determine if a given string ends with a given substring.
     *
     * @param  string  $haystack
     * @param  string|array  $needles
     * @return bool
     */
    public static function endsWith($haystack, $needles)
    {
        foreach ((array) $needles as $needle) {
            if ((string) $needle === static::substr($haystack, -static::length($needle))) {
                return true;
            }
        }

        return false;
    }

    /**
     * Cap a string with a single instance of a given value.
     *
     * @param  string  $value
     * @param  string  $cap
     * @return string
     */
    public static function finish($value, $cap)
    {
        $quoted = preg_quote($cap, '/');

        return preg_replace('/(?:'.$quoted.')+$/u', '', $value).$cap;
    }

    /**
     * Determine if a given string matches a given pattern.
     *
     * @param  string  $pattern
     * @param  string  $value
     * @return bool
     */
    public static function is($pattern, $value)
    {
        if ($pattern == $value) {
            return true;
        }

        $pattern = preg_quote($pattern, '#');

        // Asterisks are translated into zero-or-more regular expression wildcards
        // to make it convenient to check if the strings starts with the given
        // pattern such as "library/*", making any string check convenient.
        $pattern = str_replace('\*', '.*', $pattern);

        return (bool) preg_match('#^'.$pattern.'\z#u', $value);
    }

    /**
     * Return the length of the given string.
     *
     * @param  string  $value
     * @return int
     */
    public static function length($value)
    {
        return mb_strlen($value);
    }

    /**
     * Limit the number of characters in a string.
     *
     * @param  string  $value
     * @param  int     $limit
     * @param  string  $end
     * @return string
     */
    public static function limit($value, $limit = 100, $end = '...')
    {
        if (mb_strwidth($value, 'UTF-8') <= $limit) {
            return $value;
        }

        return rtrim(mb_strimwidth($value, 0, $limit, '', 'UTF-8')).$end;
    }

    /**
     * Convert the given string to lower-case.
     *
     * @param  string  $value
     * @return string
     */
    public static function lower($value)
    {
        return mb_strtolower($value, 'UTF-8');
    }

    /**
     * Limit the number of words in a string.
     *
     * @param  string  $value
     * @param  int     $words
     * @param  string  $end
     * @return string
     */
    public static function words($value, $words = 100, $end = '...')
    {
        preg_match('/^\s*+(?:\S++\s*+){1,'.$words.'}/u', $value, $matches);

        if (! isset($matches[0]) || static::length($value) === static::length($matches[0])) {
            return $value;
        }

        return rtrim($matches[0]).$end;
    }

    /**
     * Parse a Class@method style callback into class and method.
     *
     * @param  string  $callback
     * @param  string  $default
     * @return array
     */
    public static function parseCallback($callback, $default)
    {
        return static::contains($callback, '@') ? explode('@', $callback, 2) : [$callback, $default];
    }

    /**
     * Get the plural form of an English word.
     *
     * @param  string  $value
     * @param  int     $count
     * @return string
     */
    public static function plural($value, $count = 2)
    {
        return Pluralizer::plural($value, $count);
    }

    /**
     * Generate a more truly "random" alpha-numeric string.
     *
     * @param  int  $length
     * @return string
     */
    public static function random($length = 16)
    {
        $string = '';

        while (($len = static::length($string)) < $length) {
            $size = $length - $len;

            $bytes = random_bytes($size);

            $string .= static::substr(str_replace(['/', '+', '='], '', base64_encode($bytes)), 0, $size);
        }

        return $string;
    }

    /**
     * Generate a more truly "random" bytes.
     *
     * @param  int  $length
     * @return string
     *
     * @deprecated since version 5.2. Use random_bytes instead.
     */
    public static function randomBytes($length = 16)
    {
        return random_bytes($length);
    }

    /**
     * Generate a "random" alpha-numeric string.
     *
     * Should not be considered sufficient for cryptography, etc.
     *
     * @param  int  $length
     * @return string
     */
    public static function quickRandom($length = 16)
    {
        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

        return static::substr(str_shuffle(str_repeat($pool, $length)), 0, $length);
    }

    /**
     * Compares two strings using a constant-time algorithm.
     *
     * Note: This method will leak length information.
     *
     * Note: Adapted from Symfony\Component\Security\Core\Util\StringUtils.
     *
     * @param  string  $knownString
     * @param  string  $userInput
     * @return bool
     *
     * @deprecated since version 5.2. Use hash_equals instead.
     */
    public static function equals($knownString, $userInput)
    {
        return hash_equals($knownString, $userInput);
    }

    /**
     * Replace the first occurrence of a given value in the string.
     *
     * @param  string  $search
     * @param  string  $replace
     * @param  string  $subject
     * @return string
     */
    public static function replaceFirst($search, $replace, $subject)
    {
        $position = strpos($subject, $search);

        if ($position !== false) {
            return substr_replace($subject, $replace, $position, strlen($search));
        }

        return $subject;
    }

    /**
     * Replace the last occurrence of a given value in the string.
     *
     * @param  string  $search
     * @param  string  $replace
     * @param  string  $subject
     * @return string
     */
    public static function replaceLast($search, $replace, $subject)
    {
        $position = strrpos($subject, $search);

        if ($position !== false) {
            return substr_replace($subject, $replace, $position, strlen($search));
        }

        return $subject;
    }

    /**
     * Convert the given string to upper-case.
     *
     * @param  string  $value
     * @return string
     */
    public static function upper($value)
    {
        return mb_strtoupper($value, 'UTF-8');
    }

    /**
     * Convert the given string to title case.
     *
     * @param  string  $value
     * @return string
     */
    public static function title($value)
    {
        return mb_convert_case($value, MB_CASE_TITLE, 'UTF-8');
    }

    /**
     * Get the singular form of an English word.
     *
     * @param  string  $value
     * @return string
     */
    public static function singular($value)
    {
        return Pluralizer::singular($value);
    }

    /**
     * Generate a URL friendly "slug" from a given string.
     *
     * @param  string  $title
     * @param  string  $separator
     * @return string
     */
    public static function slug($title, $separator = '-')
    {
        $title = static::ascii($title);

        // Convert all dashes/underscores into separator
        $flip = $separator == '-' ? '_' : '-';

        $title = preg_replace('!['.preg_quote($flip).']+!u', $separator, $title);

        // Remove all characters that are not the separator, letters, numbers, or whitespace.
        $title = preg_replace('![^'.preg_quote($separator).'\pL\pN\s]+!u', '', mb_strtolower($title));

        // Replace all separator characters and whitespace by a single separator
        $title = preg_replace('!['.preg_quote($separator).'\s]+!u', $separator, $title);

        return trim($title, $separator);
    }

    /**
     * Convert a string to snake case.
     *
     * @param  string  $value
     * @param  string  $delimiter
     * @return string
     */
    public static function snake($value, $delimiter = '_')
    {
        $key = $value;

        if (isset(static::$snakeCache[$key][$delimiter])) {
            return static::$snakeCache[$key][$delimiter];
        }

        if (! ctype_lower($value)) {
            $value = preg_replace('/\s+/u', '', $value);

            $value = static::lower(preg_replace('/(.)(?=[A-Z])/u', '$1'.$delimiter, $value));
        }

        return static::$snakeCache[$key][$delimiter] = $value;
    }

    /**
     * Determine if a given string starts with a given substring.
     *
     * @param  string  $haystack
     * @param  string|array  $needles
     * @return bool
     */
    public static function startsWith($haystack, $needles)
    {
        foreach ((array) $needles as $needle) {
            if ($needle != '' && mb_strpos($haystack, $needle) === 0) {
                return true;
            }
        }

        return false;
    }

    /**
     * Convert a value to studly caps case.
     *
     * @param  string  $value
     * @return string
     */
    public static function studly($value)
    {
        $key = $value;

        if (isset(static::$studlyCache[$key])) {
            return static::$studlyCache[$key];
        }

        $value = ucwords(str_replace(['-', '_'], ' ', $value));

        return static::$studlyCache[$key] = str_replace(' ', '', $value);
    }

    /**
     * Returns the portion of string specified by the start and length parameters.
     *
     * @param  string  $string
     * @param  int  $start
     * @param  int|null  $length
     * @return string
     */
    public static function substr($string, $start, $length = null)
    {
        return mb_substr($string, $start, $length, 'UTF-8');
    }

    /**
     * Make a string's first character uppercase.
     *
     * @param  string  $string
     * @return string
     */
    public static function ucfirst($string)
    {
        return static::upper(static::substr($string, 0, 1)).static::substr($string, 1);
    }

    /**
     * Returns the replacements for the ascii method.
     *
     * Note: Adapted from Stringy\Stringy.
     *
     * @see https://github.com/danielstjules/Stringy/blob/2.3.1/LICENSE.txt
     *
     * @return array
     */
    protected static function charsArray()
    {
        static $charsArray;

        if (isset($charsArray)) {
            return $charsArray;
        }

        return $charsArray = [
            '0'    => ['Â°', 'â‚€', 'Û°'],
            '1'    => ['Â¹', 'â‚�', 'Û±'],
            '2'    => ['Â²', 'â‚‚', 'Û²'],
            '3'    => ['Â³', 'â‚ƒ', 'Û³'],
            '4'    => ['â�´', 'â‚„', 'Û´', 'Ù¤'],
            '5'    => ['â�µ', 'â‚…', 'Ûµ', 'Ù¥'],
            '6'    => ['â�¶', 'â‚†', 'Û¶', 'Ù¦'],
            '7'    => ['â�·', 'â‚‡', 'Û·'],
            '8'    => ['â�¸', 'â‚ˆ', 'Û¸'],
            '9'    => ['â�¹', 'â‚‰', 'Û¹'],
            'a'    => ['Ã ', 'Ã¡', 'áº£', 'Ã£', 'áº¡', 'Äƒ', 'áº¯', 'áº±', 'áº³', 'áºµ', 'áº·', 'Ã¢', 'áº¥', 'áº§', 'áº©', 'áº«', 'áº­', 'Ä�', 'Ä…', 'Ã¥', 'Î±', 'Î¬', 'á¼€', 'á¼�', 'á¼‚', 'á¼ƒ', 'á¼„', 'á¼…', 'á¼†', 'á¼‡', 'á¾€', 'á¾�', 'á¾‚', 'á¾ƒ', 'á¾„', 'á¾…', 'á¾†', 'á¾‡', 'á½°', 'Î¬', 'á¾°', 'á¾±', 'á¾²', 'á¾³', 'á¾´', 'á¾¶', 'á¾·', 'Ð°', 'Ø£', 'á€¡', 'á€¬', 'á€«', 'Ç»', 'ÇŽ', 'Âª', 'áƒ�', 'à¤…', 'Ø§'],
            'b'    => ['Ð±', 'Î²', 'Ðª', 'Ð¬', 'Ø¨', 'á€—', 'áƒ‘'],
            'c'    => ['Ã§', 'Ä‡', 'Ä�', 'Ä‰', 'Ä‹'],
            'd'    => ['Ä�', 'Ã°', 'Ä‘', 'ÆŒ', 'È¡', 'É–', 'É—', 'áµ­', 'á¶�', 'á¶‘', 'Ð´', 'Î´', 'Ø¯', 'Ø¶', 'á€�', 'á€’', 'áƒ“'],
            'e'    => ['Ã©', 'Ã¨', 'áº»', 'áº½', 'áº¹', 'Ãª', 'áº¿', 'á»�', 'á»ƒ', 'á»…', 'á»‡', 'Ã«', 'Ä“', 'Ä™', 'Ä›', 'Ä•', 'Ä—', 'Îµ', 'Î­', 'á¼�', 'á¼‘', 'á¼’', 'á¼“', 'á¼”', 'á¼•', 'á½²', 'Î­', 'Ðµ', 'Ñ‘', 'Ñ�', 'Ñ”', 'É™', 'á€§', 'á€±', 'á€²', 'áƒ”', 'à¤�', 'Ø¥', 'Ø¦'],
            'f'    => ['Ñ„', 'Ï†', 'Ù�', 'Æ’', 'áƒ¤'],
            'g'    => ['Ä�', 'ÄŸ', 'Ä¡', 'Ä£', 'Ð³', 'Ò‘', 'Î³', 'á€‚', 'áƒ’', 'Ú¯'],
            'h'    => ['Ä¥', 'Ä§', 'Î·', 'Î®', 'Ø­', 'Ù‡', 'á€Ÿ', 'á€¾', 'áƒ°'],
            'i'    => ['Ã­', 'Ã¬', 'á»‰', 'Ä©', 'á»‹', 'Ã®', 'Ã¯', 'Ä«', 'Ä­', 'Ä¯', 'Ä±', 'Î¹', 'Î¯', 'ÏŠ', 'Î�', 'á¼°', 'á¼±', 'á¼²', 'á¼³', 'á¼´', 'á¼µ', 'á¼¶', 'á¼·', 'á½¶', 'Î¯', 'á¿�', 'á¿‘', 'á¿’', 'Î�', 'á¿–', 'á¿—', 'Ñ–', 'Ñ—', 'Ð¸', 'á€£', 'á€­', 'á€®', 'á€Šá€º', 'Ç�', 'áƒ˜', 'à¤‡'],
            'j'    => ['Äµ', 'Ñ˜', 'Ðˆ', 'áƒ¯', 'Ø¬'],
            'k'    => ['Ä·', 'Ä¸', 'Ðº', 'Îº', 'Ä¶', 'Ù‚', 'Ùƒ', 'á€€', 'áƒ™', 'áƒ¥', 'Ú©'],
            'l'    => ['Å‚', 'Ä¾', 'Äº', 'Ä¼', 'Å€', 'Ð»', 'Î»', 'Ù„', 'á€œ', 'áƒš'],
            'm'    => ['Ð¼', 'Î¼', 'Ù…', 'á€™', 'áƒ›'],
            'n'    => ['Ã±', 'Å„', 'Åˆ', 'Å†', 'Å‰', 'Å‹', 'Î½', 'Ð½', 'Ù†', 'á€”', 'áƒœ'],
            'o'    => ['Ã³', 'Ã²', 'á»�', 'Ãµ', 'á»�', 'Ã´', 'á»‘', 'á»“', 'á»•', 'á»—', 'á»™', 'Æ¡', 'á»›', 'á»�', 'á»Ÿ', 'á»¡', 'á»£', 'Ã¸', 'Å�', 'Å‘', 'Å�', 'Î¿', 'á½€', 'á½�', 'á½‚', 'á½ƒ', 'á½„', 'á½…', 'á½¸', 'ÏŒ', 'Ð¾', 'Ùˆ', 'Î¸', 'á€­á€¯', 'Ç’', 'Ç¿', 'Âº', 'áƒ�', 'à¤“'],
            'p'    => ['Ð¿', 'Ï€', 'á€•', 'áƒž', 'Ù¾'],
            'q'    => ['áƒ§'],
            'r'    => ['Å•', 'Å™', 'Å—', 'Ñ€', 'Ï�', 'Ø±', 'áƒ '],
            's'    => ['Å›', 'Å¡', 'ÅŸ', 'Ñ�', 'Ïƒ', 'È™', 'Ï‚', 'Ø³', 'Øµ', 'á€…', 'Å¿', 'áƒ¡'],
            't'    => ['Å¥', 'Å£', 'Ñ‚', 'Ï„', 'È›', 'Øª', 'Ø·', 'á€‹', 'á€�', 'Å§', 'áƒ—', 'áƒ¢'],
            'u'    => ['Ãº', 'Ã¹', 'á»§', 'Å©', 'á»¥', 'Æ°', 'á»©', 'á»«', 'á»­', 'á»¯', 'á»±', 'Ã»', 'Å«', 'Å¯', 'Å±', 'Å­', 'Å³', 'Âµ', 'Ñƒ', 'á€‰', 'á€¯', 'á€°', 'Ç”', 'Ç–', 'Ç˜', 'Çš', 'Çœ', 'áƒ£', 'à¤‰'],
            'v'    => ['Ð²', 'áƒ•', 'Ï�'],
            'w'    => ['Åµ', 'Ï‰', 'ÏŽ', 'á€�', 'á€½'],
            'x'    => ['Ï‡', 'Î¾'],
            'y'    => ['Ã½', 'á»³', 'á»·', 'á»¹', 'á»µ', 'Ã¿', 'Å·', 'Ð¹', 'Ñ‹', 'Ï…', 'Ï‹', 'Ï�', 'Î°', 'ÙŠ', 'á€š'],
            'z'    => ['Åº', 'Å¾', 'Å¼', 'Ð·', 'Î¶', 'Ø²', 'á€‡', 'áƒ–'],
            'aa'   => ['Ø¹', 'à¤†', 'Ø¢'],
            'ae'   => ['Ã¤', 'Ã¦', 'Ç½'],
            'ai'   => ['à¤�'],
            'at'   => ['@'],
            'ch'   => ['Ñ‡', 'áƒ©', 'áƒ­', 'Ú†'],
            'dj'   => ['Ñ’', 'Ä‘'],
            'dz'   => ['ÑŸ', 'áƒ«'],
            'ei'   => ['à¤�'],
            'gh'   => ['Øº', 'áƒ¦'],
            'ii'   => ['à¤ˆ'],
            'ij'   => ['Ä³'],
            'kh'   => ['Ñ…', 'Ø®', 'áƒ®'],
            'lj'   => ['Ñ™'],
            'nj'   => ['Ñš'],
            'oe'   => ['Ã¶', 'Å“', 'Ø¤'],
            'oi'   => ['à¤‘'],
            'oii'  => ['à¤’'],
            'ps'   => ['Ïˆ'],
            'sh'   => ['Ñˆ', 'áƒ¨', 'Ø´'],
            'shch' => ['Ñ‰'],
            'ss'   => ['ÃŸ'],
            'sx'   => ['Å�'],
            'th'   => ['Ã¾', 'Ï‘', 'Ø«', 'Ø°', 'Ø¸'],
            'ts'   => ['Ñ†', 'áƒª', 'áƒ¬'],
            'ue'   => ['Ã¼'],
            'uu'   => ['à¤Š'],
            'ya'   => ['Ñ�'],
            'yu'   => ['ÑŽ'],
            'zh'   => ['Ð¶', 'áƒŸ', 'Ú˜'],
            '(c)'  => ['Â©'],
            'A'    => ['Ã�', 'Ã€', 'áº¢', 'Ãƒ', 'áº ', 'Ä‚', 'áº®', 'áº°', 'áº²', 'áº´', 'áº¶', 'Ã‚', 'áº¤', 'áº¦', 'áº¨', 'áºª', 'áº¬', 'Ã…', 'Ä€', 'Ä„', 'Î‘', 'Î†', 'á¼ˆ', 'á¼‰', 'á¼Š', 'á¼‹', 'á¼Œ', 'á¼�', 'á¼Ž', 'á¼�', 'á¾ˆ', 'á¾‰', 'á¾Š', 'á¾‹', 'á¾Œ', 'á¾�', 'á¾Ž', 'á¾�', 'á¾¸', 'á¾¹', 'á¾º', 'Î†', 'á¾¼', 'Ð�', 'Çº', 'Ç�'],
            'B'    => ['Ð‘', 'Î’', 'à¤¬'],
            'C'    => ['Ã‡', 'Ä†', 'ÄŒ', 'Äˆ', 'ÄŠ'],
            'D'    => ['ÄŽ', 'Ã�', 'Ä�', 'Æ‰', 'ÆŠ', 'Æ‹', 'á´…', 'á´†', 'Ð”', 'Î”'],
            'E'    => ['Ã‰', 'Ãˆ', 'áºº', 'áº¼', 'áº¸', 'ÃŠ', 'áº¾', 'á»€', 'á»‚', 'á»„', 'á»†', 'Ã‹', 'Ä’', 'Ä˜', 'Äš', 'Ä”', 'Ä–', 'Î•', 'Îˆ', 'á¼˜', 'á¼™', 'á¼š', 'á¼›', 'á¼œ', 'á¼�', 'Îˆ', 'á¿ˆ', 'Ð•', 'Ð�', 'Ð­', 'Ð„', 'Æ�'],
            'F'    => ['Ð¤', 'Î¦'],
            'G'    => ['Äž', 'Ä ', 'Ä¢', 'Ð“', 'Ò�', 'Î“'],
            'H'    => ['Î—', 'Î‰', 'Ä¦'],
            'I'    => ['Ã�', 'ÃŒ', 'á»ˆ', 'Ä¨', 'á»Š', 'ÃŽ', 'Ã�', 'Äª', 'Ä¬', 'Ä®', 'Ä°', 'Î™', 'ÎŠ', 'Îª', 'á¼¸', 'á¼¹', 'á¼»', 'á¼¼', 'á¼½', 'á¼¾', 'á¼¿', 'á¿˜', 'á¿™', 'á¿š', 'ÎŠ', 'Ð˜', 'Ð†', 'Ð‡', 'Ç�', 'Ï’'],
            'K'    => ['Ðš', 'Îš'],
            'L'    => ['Ä¹', 'Å�', 'Ð›', 'Î›', 'Ä»', 'Ä½', 'Ä¿', 'à¤²'],
            'M'    => ['Ðœ', 'Îœ'],
            'N'    => ['Åƒ', 'Ã‘', 'Å‡', 'Å…', 'ÅŠ', 'Ð�', 'Î�'],
            'O'    => ['Ã“', 'Ã’', 'á»Ž', 'Ã•', 'á»Œ', 'Ã”', 'á»�', 'á»’', 'á»”', 'á»–', 'á»˜', 'Æ ', 'á»š', 'á»œ', 'á»ž', 'á» ', 'á»¢', 'Ã˜', 'ÅŒ', 'Å�', 'ÅŽ', 'ÎŸ', 'ÎŒ', 'á½ˆ', 'á½‰', 'á½Š', 'á½‹', 'á½Œ', 'á½�', 'á¿¸', 'ÎŒ', 'Ðž', 'Î˜', 'Ó¨', 'Ç‘', 'Ç¾'],
            'P'    => ['ÐŸ', 'Î '],
            'R'    => ['Å˜', 'Å”', 'Ð ', 'Î¡', 'Å–'],
            'S'    => ['Åž', 'Åœ', 'È˜', 'Å ', 'Åš', 'Ð¡', 'Î£'],
            'T'    => ['Å¤', 'Å¢', 'Å¦', 'Èš', 'Ð¢', 'Î¤'],
            'U'    => ['Ãš', 'Ã™', 'á»¦', 'Å¨', 'á»¤', 'Æ¯', 'á»¨', 'á»ª', 'á»¬', 'á»®', 'á»°', 'Ã›', 'Åª', 'Å®', 'Å°', 'Å¬', 'Å²', 'Ð£', 'Ç“', 'Ç•', 'Ç—', 'Ç™', 'Ç›'],
            'V'    => ['Ð’'],
            'W'    => ['Î©', 'Î�', 'Å´'],
            'X'    => ['Î§', 'Îž'],
            'Y'    => ['Ã�', 'á»²', 'á»¶', 'á»¸', 'á»´', 'Å¸', 'á¿¨', 'á¿©', 'á¿ª', 'ÎŽ', 'Ð«', 'Ð™', 'Î¥', 'Î«', 'Å¶'],
            'Z'    => ['Å¹', 'Å½', 'Å»', 'Ð—', 'Î–'],
            'AE'   => ['Ã„', 'Ã†', 'Ç¼'],
            'CH'   => ['Ð§'],
            'DJ'   => ['Ð‚'],
            'DZ'   => ['Ð�'],
            'GX'   => ['Äœ'],
            'HX'   => ['Ä¤'],
            'IJ'   => ['Ä²'],
            'JX'   => ['Ä´'],
            'KH'   => ['Ð¥'],
            'LJ'   => ['Ð‰'],
            'NJ'   => ['ÐŠ'],
            'OE'   => ['Ã–', 'Å’'],
            'PS'   => ['Î¨'],
            'SH'   => ['Ð¨'],
            'SHCH' => ['Ð©'],
            'SS'   => ['áºž'],
            'TH'   => ['Ãž'],
            'TS'   => ['Ð¦'],
            'UE'   => ['Ãœ'],
            'YA'   => ['Ð¯'],
            'YU'   => ['Ð®'],
            'ZH'   => ['Ð–'],
            ' '    => ["\xC2\xA0", "\xE2\x80\x80", "\xE2\x80\x81", "\xE2\x80\x82", "\xE2\x80\x83", "\xE2\x80\x84", "\xE2\x80\x85", "\xE2\x80\x86", "\xE2\x80\x87", "\xE2\x80\x88", "\xE2\x80\x89", "\xE2\x80\x8A", "\xE2\x80\xAF", "\xE2\x81\x9F", "\xE3\x80\x80"],
        ];
    }
}
